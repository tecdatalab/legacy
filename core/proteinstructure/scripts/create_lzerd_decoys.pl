#!/usr/bin/perl

# This script is intended to be used prior to the execution of Multi-LZerD in order to generate pairwise predictions

if($#ARGV + 1 != 3)
{
	print "This command assumes that there is a separate file for each chain and that its name follows the <chainID>-<PDB ID>.pdb format\n";
	print "The script will first generate the intermediate files needed by LZerD and then begin the execution of the main program";
	print " for each pairwise combination.\nThe call to the main program is left as a background process, however, the creation of the intermediate";
	print " files is not.\nThe last parameter determines if the processes will be directly run by the script on the current machine or";
	print " if they will be just output to the standard output for later execution, or execution on a different machine.\n";
	print "\nUsage: create_lzerd_decoys <PDB ID> <comma separated chain names> <execute/print>\n";
	print "Example create_lzerd_decoys 1Z5S A,B,C,D execute\n";
}
else
{
	# define all the different extensions for the intermediate files
	$extpdb = ".pdb";
	$extms = ".pdb.ms";
	$extgts = ".gts";
	$extcp = "_cp.txt";
	$extinv = "_01.inv";

	$pdbid = $ARGV[0];
	@chains = split(/,/, $ARGV[1]);
	$mode = $ARGV[2];

	# first generate the intermediate files for each chain
	foreach $chain_name (@chains)
	{
		$basename = "$chain_name-$pdbid";
		print "Generating intermediate files for $basename\n";
		print "Executing mark_sur...\n";
		`mark_sur $basename$extpdb $basename$extms`;
		print "Calculating surfaces with GETPOINTS...\n";
		`GETPOINTS -pdb $basename$extms -smooth 0.35 -cut 1e-03`;
		print "Calculating Zernike descriptors with LZD32...\n";
		#`LZD32 -g $basename$extgts -c $basename$extcp -o $basename -dim 161 -rad 6.0 -ord 10`;
		`ZDforCP -g $basename$extgts -c $basename$extcp -o $basename -dim 161 -rad 6.0 -ord 10`;
		# delete tmp files
		`rm *.dx *.grid vecCP.txt`;
	}

	# start the execution of LZerD process for each pairwise combination
	foreach $rec_chain_index (0 .. $#chains)
	{
		foreach $lig_chain_index ($rec_chain_index + 1 .. $#chains)
		{
		
			$rec_chain = $chains[$rec_chain_index];
			$lig_chain = $chains[$lig_chain_index];
			$rec_base = "$rec_chain-$pdbid";
			$lig_base = "$lig_chain-$pdbid";
			$out_file = "$rec_chain-$lig_chain.out";
			$nohup_file = "$rec_chain-$lig_chain.nohup";

			$command = "(nohup nice LZerD -rec $rec_base$extcp -lig $lig_base$extcp -prec $rec_base$extms " .
				"-plig $lig_base$extms -zrec $rec_base$extinv -zlig $lig_base$extinv -rfmin 4.0 " .
				"-rfmax 9.0 -rfpmax 15.0 -nvotes 8 -cor 0.7 -dist 2.0 -nrad 2.5 > $out_file) > $nohup_file 2>&1 &";
			if($mode eq "execute")
			{
				system($command);
			}
			else
			{
				print "$command\n";
			}
		}
	}
	if($mode eq "execute")
	{
		print "\nProcesses are running in the background. The results will be output to files of the form <chainID>-<chainID>.out ";
		print "for each pairwise combination.\nA series of .nohup files will be generated too; errors generated by LZerD can be seen there.\n";
	}
}
