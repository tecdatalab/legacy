#ifndef _MAIN_EM_CORRELATION_CLUSTERING_OPTIONS_H_
#define _MAIN_EM_CORRELATION_CLUSTERING_OPTIONS_H_

#include <cstdlib>
#include <getopt.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

#define INPUT_OPTION "input"
#define INPUT_CHAR 'i'
#define INPUT_DESCRIPTION "Correlation results file generated by em_correlation"
#define EM_OPTION "em"
#define EM_CHAR 'e'
#define EM_DESCRIPTION "EM map from the subunit that was used to generate the correlation results"
#define CLUSTERS_CHAR 'k'
#define CLUSTERS_DESCRIPTION "Maximum value of k tested by the k-means algorithm. The value of k that yields the best cluster dissimilarity measures is used to create the clustered results."
#define CONTOUR_OPTION "contour"
#define CONTOUR_CHAR 'c'
#define CONTOUR_DESCRIPTION "Ideal density value to create the EM surface"
#define OUTPUT_OPTION "output"
#define OUTPUT_CHAR 'o'
#define OUTPUT_DESCRIPTION "File with the cluster centers found by k-means. The x,y,z coordinates of the transformed EM map center are added to each row"

#define SHORT_OPTIONS "k:"

static struct option main_em_correlation_clustering_long_options[] = 
{
	{INPUT_OPTION, required_argument, 0, INPUT_CHAR},
	{EM_OPTION, required_argument, 0, EM_CHAR},
	{CONTOUR_OPTION, required_argument, 0, CONTOUR_CHAR},
	{OUTPUT_OPTION, required_argument, 0, OUTPUT_CHAR},
	{0,0,0,0}
};


// This class parses the command line arguments supplied to the the em
// correlation calculation program
class main_em_correlation_clustering_options
{
 private:
  string input;
  string em;
  size_t k;
  float contour;
  string output;
  // set to false in case that unrecognized options or errors are found by getopt_long
  bool parse_error;

	public:
		// Only constructor in this class. It uses the input arguments in order to call getopt_long
		// to help the parsing process. After the instance is created, the methods provided by this class
		// will tell the caller if the process was successful and what is the value of the different configuration
		// parameters used
		main_em_correlation_clustering_options(int argc, char** argv)
		{
			input = em = output = "";
      k = 0;
      contour = 0.0f;
			// so far we haven't encountered errors
			parse_error = false;

			bool options_left = true;

			while(options_left)
			{
				int option_index, c; // c represents the character associated with an option
				c = getopt_long(argc, argv, SHORT_OPTIONS, main_em_correlation_clustering_long_options, &option_index);
				if(c == -1)
				{
					options_left = false;
				}
				else
				{
					// determine what type of option we got
					switch(c)
					{
						case INPUT_CHAR:
              input  = optarg;
							break;
						case EM_CHAR:
							em = optarg;
							break;
						case CLUSTERS_CHAR:
							k = static_cast<size_t>(atoi(optarg));
							break;
            case CONTOUR_CHAR:
              contour = atof(optarg);
              break;
						case OUTPUT_CHAR:
              output = optarg;
							break;
						case '?': //option not recognized (an error is automatically printed)
						default:
							options_left = false;
							parse_error = true;
							break;
					}
				}

			}
		}

		// the parse was successful if the errors flag is false and if all required
    // arguments were supplied
		bool parse_successful()
		{
			return !parse_error && !input.empty() && !em.empty() && k > 0
					&& contour > 0.0f && !output.empty();
		}
    
    string usage()
    {
      return
        string("Usage: em_correlation_clustering --input cc_results_file ") +
                "--em mrc_file -k number_of_clusters --contour density_value " +
                "--output cc_output_file\n\n" +
                "Parameters:\n\t" +
                INPUT_OPTION + ": " + INPUT_DESCRIPTION + "\n\t" +
                EM_OPTION + ": " + EM_DESCRIPTION + "\n\t" +
                string(1, CLUSTERS_CHAR) + ": " + CLUSTERS_DESCRIPTION + "\n\t" +
                CONTOUR_OPTION + ": " + CONTOUR_DESCRIPTION + "\n\t" +
      					OUTPUT_OPTION + ": " + OUTPUT_DESCRIPTION +
			      		"\n";
    }

		string get_input_filename()
		{
			return input;
		}

    string get_em_filename()
    {
      return em;
    }

    string get_output_filename()
    {
      return output;
    }

    float get_contour_value()
    {
      return contour;
    }

    size_t get_k()
    {
      return k;
    }
};

#endif
